openapi: 3.0.2
info:
  version: '1.0.0'
  title: Shout
  description: |
    This is an **example** API to demonstrate how to create JSON API on RoR.
    # Introduction
    This API definition is intended to to be a good starting point for describing your API in 
    [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).
    It also demonstrates features of simple social media for photo sharing.

# A list of tags used by the definition with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Account
    description: Operations about user account
  - name: Post
    description: Operations about user posts
  - name: Media
    description: Operations about photo on a post
  - name: Favorite
    description: Operations about user saved post
  - name: Follow
    description: Operations about user connection
  - name: Reply
    description: Operations about user comment on a post or reply
servers:
  - url: 'http://localhost:3000/api/v1'

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL. 
paths:
  '/accounts':
    get:
      tags:
        - Account
      summary:
        List all accounts
      security:
        - basic_auth: []
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                type: array
                items:
                  $ref: '#/components/schemas/Account'
              example: # response example
                - id: 1
                  uname: "Acme"
                  email: "acne@shout.com"
        '401':
          description: Unauthorized
    post:
      tags:
        - Account
      summary: Create user account
      security:
        - basic_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '201':
          description: Account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              example: # response example
                uname: user1
                email: user1@example.com
                password: null
        '422':
          description: Invalid Parameters or resource exist
        '401':
          description: Unauthorized
  '/accounts/{id}': # path parameter in curly braces
    get: # documentation for GET operation for this path
      tags:
        - Account
      summary: Get user by user id
      # list of parameters for the operation
      parameters:
        - name: id
          in: path
          description: The user id that needs to be fetched
          required: true
          schema:
            type: number
      # security schemas applied to this operation
      security:
        - basic_auth: []
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                $ref: '#/components/schemas/Account'
              example: # response example
                username: user1
                email: user@example.com
                password: null
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    # documentation for PUT operation for this path
    put:
      tags:
        - Account
      summary: Updated user
      parameters:
        - name: id
          in: path
          description: The user id that needs to be updated
          required: true
          schema:
            type: number
      security:
        - basic_auth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              example:
                username: user1
                email: user@example.com
                password: null
        '422':
          description: Invalid Parameters or resource exist
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      # request body documentation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        description: Updated user object
        required: true
    delete:
      tags:
        - Account
      summary: Delete user
      parameters:
        - name: id
          in: path
          description: The user id that needs to be delete
          required: true
          schema:
            type: number
      security:
        - basic_auth: []
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '404':
          description: Not Found

  /posts:
    get:
      tags:
        - Post
      summary:
        List all posts
      security:
        - basic_auth: [ ]
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                type: array
                items:
                  $ref: '#/components/schemas/Post'
              example: # response example
                - id: 1
                  message: "Test message"
                  liked: 0
                  private: false
                  account_id: 1
        '401':
          description: Unauthorized
    post:
      tags:
        - Post
      summary: Create post message
      security:
        - basic_auth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
            example:
              message: "Test message"
              liked: 0
              private: false
              account_id: 1
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
              example: # response example
                id: 1
                message: "Message"
                liked: 0
                private: false
                account_id: 1
        '422':
          description: Invalid Parameters or resource exist
        '401':
          description: Unauthorized
  /posts/{id}:
    get: # documentation for GET operation for this path
      tags:
        - Post
      summary: Get a post by post id
      # list of parameters for the operation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      # security schemas applied to this operation
      security:
        - basic_auth: [ ]
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                $ref: '#/components/schemas/Post'
              example: # response example
                id: 1
                message: "Test message"
                liked: 0
                private: false
                account_id: 1
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    # documentation for PUT operation for this path
    put:
      tags:
        - Post
      summary: Updated a post
      parameters:
        - name: id
          in: path
          description: The id that needs to be updated
          required: true
          schema:
            type: number
      security:
        - basic_auth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
              example:
                id: 1
                message: "Test message"
                liked: 0
                private: false
                account_id: 1
        '422':
          description: Invalid Parameters or resource exist
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      # request body documentation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
            example:
              id: 1
              message: "Test message"
              liked: 0
              private: false
              account_id: 1
        required: true
    delete:
      tags:
        - Post
      summary: Delete a post
      parameters:
        - name: id
          in: path
          description: The post id that needs to be delete
          required: true
          schema:
            type: number
      security:
        - basic_auth: [ ]
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '404':
          description: Not Found

  /media:
    get:
      tags:
        - Media
      summary:
        List all posted images
      security:
        - basic_auth: [ ]
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                type: array
                items:
                  $ref: '#/components/schemas/Media'
              example: # response example
                - id: 1
                  post_id: 1
                  url: 'https://random.imagecdn.app/500/500'
                  kind: 'image'
        '401':
          description: Unauthorized
    post:
      tags:
        - Media
      summary: Link image to a post
      security:
        - basic_auth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Media'
            example:
              post_id: 1
              url: 'https://random.imagecdn.app/500/500'
              kind: 'image'
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
              example: # response example
                id: 1
                post_id: 1
                url: 'https://random.imagecdn.app/500/500'
                kind: 'image'
        '422':
          description: Invalid Parameters or resource exist
        '401':
          description: Unauthorized
  /media/{id}:
    get: # documentation for GET operation for this path
      tags:
        - Media
      summary: Get a image by id
      # list of parameters for the operation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      # security schemas applied to this operation
      security:
        - basic_auth: [ ]
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                $ref: '#/components/schemas/Media'
              example: # response example
                id: 1
                post_id: 1
                url: 'https://random.imagecdn.app/500/500'
                kind: 'image'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    # documentation for PUT operation for this path
    put:
      tags:
        - Media
      summary: Updated an image url
      parameters:
        - name: id
          in: path
          description: The id that needs to be updated
          required: true
          schema:
            type: number
      security:
        - basic_auth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
              example:
                id: 1
                post_id: 1
                url: 'https://random.imagecdn.app/500/500'
                kind: 'image'
        '422':
          description: Invalid Parameters or resource exist
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      # request body documentation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Media'
            example:
              id: 1
              url: 'https://random.imagecdn.app/500/500'
              kind: 'image'
        required: true
    delete:
      tags:
        - Media
      summary: Delete an image
      parameters:
        - name: id
          in: path
          description: The image id that needs to be delete
          required: true
          schema:
            type: number
      security:
        - basic_auth: [ ]
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '404':
          description: Not Found

  /replies:
    get:
      tags:
        - Reply
      summary:
        List all replies
      security:
        - basic_auth: [ ]
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                type: array
                items:
                  $ref: '#/components/schemas/Reply'
              example: # response example
                - id: 1
                  message: 'reply message'
                  post_id: 1
                  account_id: 1
        '401':
          description: Unauthorized
    post:
      tags:
        - Reply
      summary: Reply to a post
      security:
        - basic_auth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reply'
            example:
              message: 'reply message'
              post_id: 1
              account_id: 1
      responses:
        '201':
          description: Reply message created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
              example: # response example
                id: 1
                message: 'reply message'
                post_id: 1
                account_id: 1
        '422':
          description: Invalid Parameters or resource exist
        '401':
          description: Unauthorized
  /replies/{id}:
    get: # documentation for GET operation for this path
      tags:
        - Reply
      summary: Get a replied message by id
      # list of parameters for the operation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      # security schemas applied to this operation
      security:
        - basic_auth: [ ]
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                $ref: '#/components/schemas/Reply'
              example: # response example
                id: 1
                message: 'reply message'
                post_id: 1
                account_id: 1
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    # documentation for PUT operation for this path
    put:
      tags:
        - Reply
      summary: Edit replied message
      parameters:
        - name: id
          in: path
          description: The id that needs to be updated
          required: true
          schema:
            type: number
      security:
        - basic_auth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
              example:
                id: 1
                message: 'reply message'
                post_id: 1
                account_id: 1
        '422':
          description: Invalid Parameters or resource exist
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      # request body documentation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reply'
            example:
              id: 1
              message: 'edited reply message'
        required: true
    delete:
      tags:
        - Reply
      summary: Delete replied message
      parameters:
        - name: id
          in: path
          description: The image id that needs to be delete
          required: true
          schema:
            type: number
      security:
        - basic_auth: [ ]
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '404':
          description: Not Found

  '/follows':
    get:
      tags:
        - Follow
      summary:
        List all follow
      security:
        - basic_auth: [ ]
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                type: array
                items:
                  $ref: '#/components/schemas/Follow'
              example: # response example
                - follower_id: 1
                  following_id: 2
        '401':
          description: Unauthorized
    post:
      tags:
        - Follow
      summary: Create a follow record for a user
      security:
        - basic_auth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
            example:
              follower_id: 1
              following_id: 2
      responses:
        '201':
          description: Follow created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
              example: # response example
                follower_id: 1
                following_id: 2
        '422':
          description: Invalid Parameters or resource exist
        '401':
          description: Unauthorized
  '/follows/{id}': # path parameter in curly braces
    get: # documentation for GET operation for this path
      tags:
        - Follow
      summary: Get a follow record
      # list of parameters for the operation
      parameters:
        - name: id
          in: path
          description: The record id that needs to be fetched
          required: true
          schema:
            type: number
      # security schemas applied to this operation
      security:
        - basic_auth: [ ]
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                $ref: '#/components/schemas/Follow'
              example: # response example
                follower_id: 1
                following_id: 2
        '401':
          description: Unauthorized
        '404':
          description: Not Found

    delete:
      tags:
        - Follow
      summary: Unfollow
      parameters:
        - name: id
          in: path
          description: The record id that needs to be delete
          required: true
          schema:
            type: number
      security:
        - basic_auth: [ ]
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '404':
          description: Not Found

  '/favorites':
    get:
      tags:
        - Favorite
      summary:
        List all saved post
      security:
        - basic_auth: [ ]
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                type: array
                items:
                  $ref: '#/components/schemas/Favorite'
              example: # response example
                - post_id: 1
                  account_id: 2
        '401':
          description: Unauthorized
    post:
      tags:
        - Favorite
      summary: Create a favorite post
      security:
        - basic_auth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Favorite'
            example:
              post_id: 1
              account_id: 2
      responses:
        '201':
          description: Follow created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
              example: # response example
                post_id: 1
                account_id: 2
        '422':
          description: Invalid Parameters or resource exist
        '401':
          description: Unauthorized
  '/favorites/{id}': # path parameter in curly braces
    get: # documentation for GET operation for this path
      tags:
        - Favorite
      summary: Get a saved post
      # list of parameters for the operation
      parameters:
        - name: id
          in: path
          description: The record id that needs to be fetched
          required: true
          schema:
            type: number
      # security schemas applied to this operation
      security:
        - basic_auth: [ ]
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                $ref: '#/components/schemas/Favorite'
              example: # response example
                post_id: 1
                account_id: 2
        '401':
          description: Unauthorized
        '404':
          description: Not Found

    delete:
      tags:
        - Favorite
      summary: Delete saved post
      parameters:
        - name: id
          in: path
          description: The record id that needs to be delete
          required: true
          schema:
            type: number
      security:
        - basic_auth: [ ]
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '404':
          description: Not Found

# An object to hold reusable parts that can be used across the definition
components:
  schemas:
    Account:
      type: object
      properties:
        uname:
          description: User supplied username
          type: string
          minLength: 2
          example: John78
        email:
          description: User email address
          type: string
          format: test
          example: john.smith@example.com
        password:
          description: User supplied password on creation
          type: string
          minLength: 8
          maxLength: 20
    Post:
      type: object
      properties:
        message:
          description: any message for posting
          type: string
          maxLength: 512
        liked:
          description: Number of interactivity
          type: integer
        private:
          description: Set post to private
          type: boolean
          default: false
        account_id:
          description: Post owner
          type: integer
    Media:
      description:
        Image that a user share on post.
      type: object
      properties:
        post_id:
          type: integer
        url:
          type: string
          maxLength: 512
        kind:
          description: 'image/video'
          type: string
    Reply:
      description:
        Reply message on a post
      type: object
      properties:
        post_id:
          type: integer
        account_id:
          type: integer
        message:
          type: string
          maxLength: 512
    Favorite:
      type: object
      properties:
        post_id:
          type: integer
        account_id:
          type: integer
          description: Owner
    Follow:
      type: object
      properties:
        follower_id:
          description: reference to follower account
          type: integer
        following_id:
          description: reference to following account
          type: integer
  # Security scheme definitions that can be used across the definition.
  securitySchemes:
    basic_auth: # security definition name (you can name it as you want)
      type: http
      scheme: basic
