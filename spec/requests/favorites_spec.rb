# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/favorites', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Favorite. As you add validations to Favorite, be sure to
  # adjust the attributes here as well.

  let(:account) {
    Account.create! "uname": 'account', "email": 'account1@shout.com', "password": 'simple88'
  }

  let(:post_item) {
    Post.create! account_id: account.id
  }

  let(:valid_attributes) do
    {
      post_id: post_item.id,
      account_id: account.id
    }
  end

  let(:invalid_attributes) do
    {}
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # FavoritesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {
      "Accept": 'application/json',
      "Content-Type": 'application/json',
      "Authorization": 'Basic U2hvdXQ6U3VwZXJTZWNyZXQ='
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Favorite.create! valid_attributes
      get favorites_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      favorite = Favorite.create! valid_attributes
      get favorite_url(favorite), headers:valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Favorite' do
        expect do
          post favorites_url,
               params: { favorite: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Favorite, :count).by(1)
      end

      it 'renders a JSON response with the new favorite' do
        post favorites_url,
             params: { favorite: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Favorite' do
        expect do
          post favorites_url,
               params: { favorite: invalid_attributes }, as: :json
        end.to change(Favorite, :count).by(0)
      end

      it 'renders a JSON response with errors for the new favorite' do
        post favorites_url,
             params: { favorite: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    it 'not support updating' do
      fav = Favorite.create! valid_attributes
      patch follow_url(fav), headers: valid_headers, as: :json
      expect(response).to have_http_status(:not_implemented)
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested favorite' do
      favorite = Favorite.create! valid_attributes
      expect do
        delete favorite_url(favorite), headers: valid_headers, as: :json
      end.to change(Favorite, :count).by(-1)
    end
  end
end
